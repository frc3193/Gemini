// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "AxialDefault.h"
#define LEFT_Y_AXIS 1
#define RIGHT_Y_AXIS 5
#define VOLTS_PER_INCH 0.009766

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

AxialDefault::AxialDefault(): Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::axialTest.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	ultrasonicInch = 0;
	encoderRotations = 0;
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void AxialDefault::Initialize() {
	RobotMap::legitServo->Set(-1.0);
}

// Called repeatedly when this Command is scheduled to run
void AxialDefault::Execute() {
	//Analog Ultrasonic: ultrasonicInch = Robot::axialTest->ultrasonic->GetVoltage() / VOLTS_PER_INCH;
	ultrasonicInch = Robot::axialTest->ultrasonic->GetRangeInches();
	encoderRotations = RobotMap::encoderTest->Get();

	SmartDashboard::PutNumber("encoderDistance", RobotMap::encoderTest->GetDistance());
	SmartDashboard::PutBoolean("isStopped", RobotMap::encoderTest->GetStopped());
	SmartDashboard::PutNumber("rotations", encoderRotations);

	SmartDashboard::PutBoolean("validity", Robot::axialTest->ultrasonic->IsRangeValid());
	SmartDashboard::PutNumber("range", ultrasonicInch);

	SmartDashboard::PutNumber("gyroAngle", Robot::axialTest->gyroTest->GetAngle());
	SmartDashboard::PutNumber("gyroRate", Robot::axialTest->gyroTest->GetRate());

	SmartDashboard::PutNumber("setA", Robot::axialTest->vicA1->Get());
	SmartDashboard::PutNumber("setB", Robot::axialTest->vicB1->Get());

	SmartDashboard::PutNumber("servoAngle", RobotMap::legitServo->GetAngle());
	SmartDashboard::PutNumber("servoNumber", RobotMap::legitServo->Get());

	SmartDashboard::PutNumber("xAccel", RobotMap::bAccel->GetX());
	SmartDashboard::PutNumber("yAccel", RobotMap::bAccel->GetY());
	SmartDashboard::PutNumber("zAccel", RobotMap::bAccel->GetZ());


	Robot::axialTest->vicA1->Set(Robot::oi->getDriver()->GetRawAxis(LEFT_Y_AXIS));
	Robot::axialTest->vicA2->Set(Robot::oi->getDriver()->GetRawAxis(LEFT_Y_AXIS));
	Robot::axialTest->vicB1->Set(Robot::oi->getDriver()->GetRawAxis(RIGHT_Y_AXIS));
	Robot::axialTest->vicB2->Set(Robot::oi->getDriver()->GetRawAxis(RIGHT_Y_AXIS));

/*	if (Robot::oi->y->Get() && RobotMap::legitServo->Get() == 0)
	{
		RobotMap::legitServo->Set(1);
	}

	else if (Robot::oi->y->Get() && RobotMap::legitServo->Get() == 1)
	{
		RobotMap::legitServo->Set(0);
	}
*/
	if (Robot::oi->a->Get())
	{
		RobotMap::legitServo->Set(1.0);
	}

	else if (Robot::oi->y->Get())
	{
		RobotMap::legitServo->Set(0.0);
	}


}

// Make this return true when this Command no longer needs to run execute()
bool AxialDefault::IsFinished() {
    return false;
}

// Called once after isFinished returns true
void AxialDefault::End() {

}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void AxialDefault::Interrupted() {

}
